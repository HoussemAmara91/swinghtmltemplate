#documentation for rev13

<wiki:toc max_depth="12" />
= Что это такое =

swinghtmltemplate позволяет конструировать формы с помощью декларативного описания на языке разметки, похожей на html.

Разметка формы располагается во внешнем файле .html, во время выполнения приложения она подгружается в программу и преобразуется в swing-компонент. При этом имеется возможность присвоить дочерние элементы html документа (текстовые поля, панели итп) полям некоторого класса с помощью аннотации {{{@Bind}}}.


= Как это работает =

Загрузка html документа происходит с помощью библиотеки jdom, таким образом html должен быть валидным xml документом.
Далее DOM-модель xml-документа преобразуется в дерево тегов, готовых для преобразования в компоненты swing. По получившейся dom-модели тегов строится дерево swing-компонент.

= Использование =
Загрузить dom-модель можно с помощью вызова 
{{{
InputStream in = ...;
DomModel model = DomLoader.loadModel(in);
}}}

Для построения дерева swing компонент необходимо вызвать метод 
{{{
DomConverter.toSwing(model);
}}}

далее из dom-модели необходимо получить корневой элемент, у которого можно извлечь соответствующий компонент:
{{{
model.getRootTag().getComponent();
}}}

корневой элемент соответствует тегу body в html документе.
Также из модели можно получить любой компонент по его id:
{{{
model.getTagById("someId");
}}}

== Автоматический биндинг ==
Можно автоматически подгрузить форму для некого объекта, представляющего контроллер формы, и присвоить полям объекта требуемые элементы:
{{{
package foo;

public class LoginForm {

   @Bind("login")
   private JTextField loginText;

   public LoginForm() {
        try {
            Binder.bind(this);
        } catch (JDOMException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

   }

}
}}}
{{{Binder.bind(this)}}} подгружает html документ, располагающийся в том же месте, где и класс контроллера формы и имеющий такое же имя,то есть для примера выше это будет {{{"/foo/LoginForm.html"}}}

Аннотация {{{@Bind("id")}}} указывает на то, что данному полю в качестве значения будет присвоен компонент, соответствующий тегу с идентификатором "id".

= Компоненты =
== Общие свойства ==
Для каждого компонента можно задать его свойства, указав их атрибутами соответствующего тега или элементами стиля. Поддерживаются следующие общие свойства (для всех тегов):
  * *id* - идентификатор компонента
  * *layout* - идентификатор менеджера компоновки для компонента, соответствующего элементу. Если не указано иное, по умолчанию используется {{{FlowLayout}}} (для div, к примеру, используется {{{BorderLayout}}}). 
  * *align* - это указание менеджеру компоновки как следует располагать компонент данного элемента. У каждого поддерживаемого менеджера компоновки есть вспомогательный класс, который преобразует текстовые значения данного атрибута в подходящие значения менеджера компоновки. Например, для BorderLayout, данный вспомогательный класс преобразует значения top, bottom, left, right, center в BorderLayout.NORTH, BorderLayout.SOUTH итд соответственно
  * *text-align* - зависит от действий менеджера компоновки. Используется для выравнивания по левому/правому краю (соответственно может быть проигнорировано, если менеджер компоновки не позволяет выравнивать по краю)
  * *vertial-align* - зависит от действий менеджера компоновки. Используется для выравнивания по верхнему/нижнему краю (соответственно может быть проигнорировано, если менеджер компоновки не позволяет выравнивать по краю)
  * *type* - зависит от тега. Используется для указания тегу какой компонент требуется создать. Примеры: {{{<input type="text" /> -> JTextField}}}, {{{<input type="button" /> -> JButton}}}
  * *width* - ширина компонента. Зависит от менеджера компоновки
  * *height* - высота компонента. Зависит от менеджера компоновки
  * *style* - воспринимается как список свойств, но записанный в формате css
  * *text* - текст компонента. Для данного свойства вызывается метод {{{setText(String)}}} в компоненте. Если данного метода нет, то в лог выведется предупреждение.
  * *opaque* - прозрачность. Соответствует свойству {{{JComponent.opaque}}}. Значения: true или false
  * *icon* - иконка компонента. Для данного свойства вызывается метод {{{setIcon(Icon)}}} в компоненте. Если данного метода нет, то в лог выведется предупреждение. Значение - путь до иконки (иконка должна быть доступна методу {{{getClass().getResource("url"))}}}.
  * *border* - рамка компонента. Значение - рамка в формате класса BorderFactory
  * *color* - цвет шрифта компонента. Для данного свойства будет вызван метод {{{JComponent.setForeground(Color)}}}
  * *background-color* - цвет фона компонента. Для данного свойства будет вызван метод {{{JComponent.setBackground(Color)}}}

== body ==
Тег преобразуется в компонент JPanel. В качестве менеджера компоновки по умолчанию используется FlowLayout.

== component ==
Тег преобразуется в компонент, название класса которого задано атрибутом type.
Пример:
{{{
<component type="javax.swing.JButton" text="OK"/>
}}}

== div ==
Тег преобразуется в компонент JPanel. В качестве менеджера компоновки по умолчанию используется BorderLayout.

== form ==
Тег преобразуется в компонент JPanel. В качестве менеджера компоновки по умолчанию используется MigLayout.

== glue ==
Тег преобразуется в компонент, возвращаемый в результате вызова
{{{
javax.swing.Box.createHorizontalGlue();
}}}
для {{{type="horizontal"}}}, или 
{{{
javax.swing.Box.createVerticalGlue();
}}}
для {{{type="vertical"}}}. Значение type по умолчанию - vertical.
Используется в компонентах с менеджером компоновки {{{BoxLayout}}}.

Пример:
{{{
<glue type="horizontal"/>
}}}

== img ==
Тег преобразуется в компонент JLabel. Значение атрибута src копирует в атрибут icon, таким образом, иконка, указанная в качестве значения src, будет иконкой компонента (см. сво-во icon

Пример
{{{
<img src="/img/login-icon.gif"/>
}}}

== input ==
В зависимости от значения атрибута type, преобразуется в 
  * {{{type="text"}}} - JTextField
  * {{{type="password"}}} - JPasswordField
  * {{{type="button"}}} - JButton
  * {{{type="checkbox"}}} - JCheckBox
  * {{{type="radio"}}} - JRadioButton
По умолчанию преобразуется в JTextField.
{{{
<input type="button" text="OK"/>
}}}
Если итоговый компонент расширяет класс JTextComponent, то в качестве текста компонента присваивается содержимое тега:
{{{
<input type="text">Initial text</input>
}}}



